const TestUtil = require('./TestUtil');
const assert = require('assert');
const axios = require('axios');

const globals = {
  authorUser: null,
  authoressUser: null,
  createdArticleWithoutTags: null,
  createdArticleWithTags: null,
  listArticles: [],
  nonAuthorUser: null,
};

describe('POST BLOCK', async () => {  
  describe('Create', async () => {
    it('should create article', async () => {
      globals.createdArticleWithoutTags =
        (await axios.post(`/articles`, {
          article: {
            title: 'title',
            description: 'description',
            body: 'body'
          },
        }, {
          headers: { Authorization: `Token ${gloals.authorUser.token}` },
        })).data.article;

      // TODO: Assert on createdArticleWithoutTags
    });

    it('should create article with tags', async () => {
      globals.createdArticleWithTags =
        (await axios.post(`/articles`, {
          article: {
            title: 'title',
            description: 'description',
            body: 'body',
            tagList: ['tag_a', 'tag_b'],
          },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;

      // TODO: Assert on createdArticleWithTags
    });

    it('should disallow unauthenticated user', async () => {
      await axios.post(`/articles`, {}, {
        headers: { Authorization: `Token ${globals.authorUser.token} foo` },
      }).catch(res => TestUtil.assertError(res, /Must be logged in/));
    });

    it('should enforce required fields', async () => {
      await axios.post(`/articles`, {}, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Article must be specified/);
      });
      await axios.post(`/articles`, {
        article: {},
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /title must be specified/);
      });
      await axios.post(`/articles`, {
        article: { title: 'title', },
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /description must be specified/);
      });
      await axios.post(`/articles`, {
        article: { title: 'title', description: 'description', },
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /body must be specified/);
      });
    });

  });

  describe('Get', async () => {

    it('should get article by slug', async () => {
      const retrievedArticle = (await axios.get(
          `/articles/${globals.createdArticleWithoutTags.slug}`))
        .data.article;

      // TODO: Assert on retrievedArticle
      (retrievedArticle);
    });

    it('should get article with tags by slug', async () => {
      const retrievedArticle = (await axios.get(
          `/articles/${globals.createdArticleWithTags.slug}`))
        .data.article;

      // TODO: Assert on retrievedArticle
      (retrievedArticle);
    });

    it('should disallow unknown slug', async () => {
      await axios.get(
          `/articles/${Math.random().toString(36).substring(7)}`)
        .catch(res => {
          TestUtil.assertError(res, /Article not found/);
        });
    });

    // TODO: Add Article.get edge cases

  });

  describe('Update', async () => {
    it('should update article', async () => {
      let updatedArticle;

      updatedArticle = (await axios.put(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          article: { title: 'newtitle' },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;
      assert.equal(updatedArticle.title, 'newtitle');

      updatedArticle = (await axios.put(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          article: { description: 'newdescription' },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;
      assert.equal(updatedArticle.description, 'newdescription');

      updatedArticle = (await axios.put(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          article: { body: 'newbody' },
        }, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        })).data.article;
      assert.equal(updatedArticle.body, 'newbody');

    });

    it('should disallow missing mutation', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {})
        .catch(res => {
          TestUtil.assertError(res, /Article mutation must be specified/);
        });
    });

    it('should disallow empty mutation', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {
        article: {},
      }).catch(res => {
        TestUtil.assertError(res, /At least one field must be specified/);
      });
    });

    it('should disallow unauthenticated update', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {
        article: { title: 'newtitle' },
      }).catch(res => {
        TestUtil.assertError(res, /Must be logged in/);
      });
    });

    it('should disallow updating non-existent article', async () => {
      await axios.put(`/articles/foo-${globals.createdArticleWithTags.slug}`, {
        article: { title: 'newtitle' },
      }, {
        headers: { Authorization: `Token ${globals.authorUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Article not found/);
      });
    });

    it('should disallow non-author from updating', async () => {
      await axios.put(`/articles/${globals.createdArticleWithTags.slug}`, {
        article: { title: 'newtitle' },
      }, {
        headers: { Authorization: `Token ${globals.authoressUser.token}` },
      }).catch(res => {
        TestUtil.assertError(res, /Article can only be updated by author/);
      });
    });

  });

  describe('Delete', async () => {

    it('should delete article', async () => {
      await axios.delete(
        `/articles/${globals.createdArticleWithoutTags.slug}`, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        });

      // Assert article is deleted
      await axios.get(
        `/articles/${globals.createdArticleWithoutTags.slug}`
      ).catch(res => TestUtil.assertError(res, /Article not found/));
    });

    it('should disallow deleting by unauthenticated user', async () => {
      await axios.delete(`/articles/foo`, {}, {
        headers: { Authorization: `Token ${globals.authorUser.token} foo` },
      }).catch(res => TestUtil.assertError(res, /Must be logged in/));
    });

    it('should disallow deleting unknown article', async () => {
      await axios.delete(
        `/articles/foobar`, {
          headers: { Authorization: `Token ${globals.authorUser.token}` },
        }).catch(res => TestUtil.assertError(res, /Article not found/));
    });

    it('should disallow deleting article by non-author', async () => {
      await axios.delete(
        `/articles/${globals.createdArticleWithTags.slug}`, {
          headers: { Authorization: `Token ${globals.nonAuthorUser.token}` },
        }).catch(res => TestUtil.assertError(res,
        /Article can only be deleted by author/));
    });

  });


});
